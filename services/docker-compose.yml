services:
  minio:
    restart: always
    image: minio/minio:RELEASE.2025-01-20T14-49-07Z
    container_name: mlflow_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./minio/:/data
    networks:
      - ai_network

  mc:
    image: minio/mc:RELEASE.2025-01-17T23-25-50Z
    depends_on:
      - minio
    container_name: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c "
      /tmp/wait-for-it.sh minio:9000 &&
      /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      /usr/bin/mc mb minio/mlflow;
      exit 0;
      "
    volumes:
      - ./wait-for-it.sh:/tmp/wait-for-it.sh
    networks:
      - ai_network

  db:
    restart: always
    image: mysql/mysql-server:8.0.32-1.2.11-server
    container_name: mlflow_db
      # ports:
      #   - "3306:3306"
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - ./db/:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai_network
  
  mlflow:
    restart: always
    build: ./mlflow
    container_name: mlflow_server
    depends_on:
      - mc
      - db
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0
    networks:
      - ai_network

  server:
    image: server:rest_api_v1
    build: ./server
      #context: .
      #dockerfile: server/Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - .env
    tty: true
    #entrypoint: ["/bin/sh","/server/start_server.sh"]
    volumes:
      - ./server/:/server/
      - ../data/:/data/
    networks:
      - ai_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: [ '0' ]
              capabilities: [ gpu ]
  

  grafana:
    image: grafana/grafana-enterprise:11.4.0
    container_name: grafana
    restart: unless-stopped
    environment:
      # - GF_SERVER_ROOT_URL=http://my.grafana.server/
     - GF_INSTALL_PLUGINS=grafana-clock-panel
    user: '0'
    ports:
     - '3000:3000'
    networks:
      - ai_network
    volumes:
      - ./grafana_storage/:/var/lib/grafana/
        #- grafana-data:/var/lib/grafana

networks:
  ai_network:
    driver: bridge

